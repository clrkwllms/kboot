#!/usr/bin/python -tt
#
# script to selectively boot one grub entry *one time* and not
# affect the default boot entry
#
#  Copyright 2016,2017 Clark Williams <williams@redhat.com>
#
#  2017-11-22: added kexec capability

import os
import sys
import os.path
import subprocess
import argparse

# class for grub entries
class Kernel(object):
    __slots__ = ('index', 'description', 'path','initrd', 'isrt')
    def __init__(self, index, desc, path, initrd, isrt=False):
        self.index = index
        self.description = desc
        p = "/boot%s" % path
        if not os.path.exists(p):
            raise RuntimeError, "invalid boot image path: %s" % p
        self.path = p
        self.isrt = isrt
        r = "/boot%s" % initrd
        if not os.path.exists(r):
            raise RuntimeError, "invalid initrd image path: %s" % r
        self.initrd = r

    def show(self):
        print("data for kernel at index %d:" % self.index)
        print("   %s" % self.description)
        print("   path: %s" % self.path)
        print("   isrt: %s" % self.isrt)
        print("   initrd: %s" % self.initrd)


# base class for both Grub1 and Grub2
class GrubBase(object):
    def __init__(self, args):
        self.kernels = []
        self.default_idx = -1
        self.verbose = args.verbose
        self.dry_run = args.dry_run
        self.realtime = args.realtime
        self.debug = args.debug

    # verify that a user-input index is valid
    def range_check(self, index):
        if index < 0 or index >= len(self.kernels):
            raise IndexError, "%d is out of range (0-%d valid)" % (index, len(self.kernels)-1)
        return index

    # grab an input from the user
    def getindex(self):
        try:
            index = raw_input("Select kernel [%d]: " % self.default_idx)
        except KeyboardInterrupt:
            sys.exit(0)
        if index == '':
            index = self.default_idx
        index = int(index)
        return self.range_check(index)

    def reboot(self):
        if self.dry_run:
            print ("dry-run: reboot called")
            return
        print("rebooting")
        subprocess.call("reboot", shell=True)

    # return true if the selected path is a realtime kernel
    def isrt(self, path):
        if path.find(".rt") != -1:
            return True
        if path.find("-rt") != -1:
            return True
        return False

    # display available kernels
    def showkernels(self):
        for i,k in enumerate(self.kernels):
            if self.realtime and not k.isrt:
                continue
            if i == self.default_idx:
                output = "*"
            else:
                output = " "
            if k.isrt:
                output += "r %2d: %s" % (i, k.description)
            else:
                output += "  %2d: %s" % (i, k.description)
            print output

    def info(self, str):
        if self.verbose:  print(str)

    def debug(self, str):
        if self.debug: print(str)

    # pick a kernel from the list and kexec it (rather than rebooting)
    def kexec(self, index):
        k = self.kernels[index]
        cmd = ['kexec',  '--load',  k.path,  '--reuse-cmdline', '--initrd=%s' % k.initrd ]
        print("kexec loading kernel: %s" % k.path)
        ret = subprocess.call(cmd)
        if ret:
            print("error loading kexec kernel %s" % k.path)
            sys.exit(ret)
        print("kexec execing loaded kernel")
        ret = subprocess.call(['kexec', '--exec'])
        if ret:
            print("error kexec'ing loaded kernel %s" % k.path)
            sys.exit(ret)

# deal with an installed Grub1 (RHEL6 and before)
class Grub1(GrubBase):
    def __init__(self, args):
        GrubBase.__init__(self, args)

        index = 0
        for l in open('/etc/grub.conf'):
            l = l.strip()
            if l.startswith('title'):
                k = l[6:-1]
                continue
            if l.startswith('kernel'):
                p = l.split()[1]
                continue
            if l.startswith('initrd'):
                r = l.split()[1]
                self.kernels.append(Kernel(index, k, p, r, self.isrt(p)))
                index += 1
                continue
            if l.startswith('default'):
                self.default_idx = int(l.split('=')[1])

    def boot_once(self, index):
        if index != self.default_idx:
            if self.dry_run:
                print("dry-run: boot index %d (%s)" % (index, self.kernels[index].description))
                return
            p = subprocess.Popen(["/sbin/grub", "--batch"], stdin=subprocess.PIPE)
            p.stdin.write("savedefault --default=%d --once\n" % index)
            p.stdin.close()
            ret = p.wait()
            if ret:
                raise RuntimeError, "call to grub failed! (%d)" % ret
        self.reboot()

    def set_as_default(self, index):
        if self.dry_run:
            print ("dry-run: selected default: %s" % self.kernels[index].description)
            return
        self.info("setting %s as default kernel" %  self.kernels[index].description)
        p = subprocess.Popen(["/sbin/grub", "--batch"], stdin=subprocess.PIPE)
        p.stdin.write("savedefault --default=%d\n" % index)
        p.stdin.close()
        ret = p.wait()
        if ret:
            raise RuntimeError, "call to grub failed! (%d)" % ret

# deal with installed Grub2 (RHEL7+, Fedora)
class Grub2(GrubBase):
    def __init__(self, args):
        GrubBase.__init__(self, args)

        # make sure grub is configured properly
        for l in open("/etc/default/grub", "r"):
            l = l.strip()
            if l.startswith('GRUB_DEFAULT'):
                if l.split('=')[1].strip() != "saved":
                    raise RuntimeError, "Cannot do onetime boot! (set GRUB_DEFAULT=saved in /etc/default/grub)"

        saved_entry=""
        p = subprocess.Popen("grub2-editenv list", shell=True, stdout=subprocess.PIPE)
        for l in p.stdout.readlines():
            l = l.strip()
            if l.startswith("saved_entry"):
                saved_entry=l.split('=')[1]

        #
        # still not sure the best way to decide if we're booted through EFI or traditional BIOS
        # start with checking for the existance of the efi grub file and if that
        # doesn't exist, fall back on the regular grub file
        #
        index = 0
        path = "/etc/grub2-efi.cfg"
        if not os.path.exists(path):
            path = "/etc/grub2.cfg"
        if not os.path.exists(path):
            raise RuntimeError, "No /etc/grub2*.cfg file found!"

        for l in open(path):
            l = l.strip()
            if l.startswith("menuentry "):
                k = l[11:l.find('--class') - 2]
                continue
            if l.startswith('linux'):
                p = l.split()[1]
                continue
            if l.startswith('initrd'):
                r = l.split()[1]
                self.kernels.append(Kernel(index, k, p, r, self.isrt(p)))
                if k == saved_entry:
                    self.default_idx = index
                index += 1
                continue

    def boot_once(self, index):
        if index != self.default_idx:
            try:
                k = self.kernels[index]
            except IndexError as e:
                print("index %d is not a valid grub menu index!")
                raise
            if self.dry_run:
                print("dry-run: boot index %d : %s" % (index, k.description))
                return
            subprocess.call("/sbin/grub2-reboot '%s'" % k.description, shell=True)
            subprocess.call("/sbin/grub2-mkconfig -o /tmp/grub2.cfg", shell=True)
        self.reboot()

    def set_as_default(self, index):
        cmd = "grub2-set-default '%s'" % self.kernels[index].description
        if self.dry_run:
            print("dry-run: cmd %s" % cmd)
            return
        self.info("cmd: %s" % cmd)
        if not self.dry_run:
            subprocess.call(cmd, shell=True)
            self.regen_config()


# figure out what grub we have installed
def get_grub_version():
    p = subprocess.Popen(['rpm',  '-q', 'grub'], stdout=subprocess.PIPE)
    out = p.stdout.readline()
    if out.find("not installed") != -1:
        return 2
    return 1

def get_grub_instance(args):
    grubversion = get_grub_version()
    if grubversion == 1:
        return Grub1(args)
    else:
        return Grub2(args)

#
# main logic
#
if __name__ == "__main__":

    if os.getuid() != 0:
        raise RuntimeError, "must be root!"

    parser = argparse.ArgumentParser(description="select a kernel to boot once")
    parser.add_argument('-v', '--verbose', action='store_true',
                        help='verbose output')
    parser.add_argument('-D', '--debug', action='store_true',
                        help='turn on debugging prints')
    parser.add_argument('-s', '--set-default', action='store_true',
                        help='just set the default boot kernel')
    parser.add_argument('-d', '--dry-run', action='store_true',
                        help='dry-run, do not execute commands')
    parser.add_argument('-r', '--realtime', action='store_true',
                        help='display only realtime kernels for selection')
    parser.add_argument('-k', '--kexec', action='store_true',
                        help='use kexec rather than reboot')

    args = parser.parse_args(sys.argv[1:])

    grub = get_grub_instance(args)

    if args.set_default:
        grub.showkernels()
        grub.set_as_default(grub.getindex())
        sys.exit(0)

    try:
        index = int(sys.argv[1])
    except:
        grub.showkernels()
        index = grub.getindex()

    if args.kexec:
        grub.kexec(index)
    else:
        grub.boot_once(index)
